1. 문제 제목:
   - 배열 정렬을 통한 학생 성적순 나열

2. 배경 설명:
   - 학생들의 시험 성적을 성적순으로 나열하는 것은 학교나 교육 기관에서 자주 발생하는 작업입니다. 이는 학생의 성취도를 평가하고 순위를 매기는 데 중요한 역할을 합니다.

3. 문제 설명:
   - 주어진 학생들의 성적 배열을 높은 성적순으로 정렬하시오. 성적이 같은 경우, 학생 이름의 알파벳순으로 정렬하시오.
   - 입력: 학생 이름과 성적으로 이루어진 객체 배열
   - 출력: 성적순으로 정렬된 배열
   - 제약사항:
     - 학생 이름은 중복될 수 없다.
     - 성적은 0 이상 100 이하의 정수이다.
   - 고려할 엣지 케이스:
     - 학생이 없는 경우
     - 모든 학생의 성적이 같은 경우

4. 샘플 케이스:
   ```javascript
   입력: [{ name: "Kim", score: 88 }, { name: "Lee", score: 92 }, { name: "Park", score: 88 }]
   출력: [{ name: "Lee", score: 92 }, { name: "Kim", score: 88 }, { name: "Park", score: 88 }]

   입력: []
   출력: []
   ```

5. 함수 시그니처:
   ```javascript
   /**
    * 학생 목록을 성적순으로 정렬하여 반환합니다.
    * @param {Array} students - 학생 객체 배열 ({ name: String, score: Number })
    * @return {Array} 정렬된 학생 객체 배열
    */
   function sortStudentsByScore(students) {
     // 구현을 여기에 작성하십시오
   }
   ```

6. 테스트 케이스:
   ```javascript
   // 기본 사용 사례
   console.assert(JSON.stringify(sortStudentsByScore([{ name: "Kim", score: 70 }, { name: "Lee", score: 85 }])) === JSON.stringify([{ name: "Lee", score: 85 }, { name: "Kim", score: 70 }]));

   // 엣지 케이스: 학생이 없는 경우
   console.assert(JSON.stringify(sortStudentsByScore([])) === JSON.stringify([]));

   // 엣지 케이스: 모든 학생의 성적이 같은 경우
   console.assert(JSON.stringify(sortStudentsByScore([{ name: "Kim", score: 90 }, { name: "Lee", score: 90 }, { name: "Park", score: 90 }])) === JSON.stringify([{ name: "Kim", score: 90 }, { name: "Lee", score: 90 }, { name: "Park", score: 90 }]));

   // 복잡한 사용 사례: 성적과 이름이 혼합된 경우
   console.assert(JSON.stringify(sortStudentsByScore([{ name: "Kim", score: 80 }, { name: "Lee", score: 100 }, { name: "Park", score: 80 }, { name: "Choi", score: 95 }])) === JSON.stringify([{ name: "Lee", score: 100 }, { name: "Choi", score: 95 }, { name: "Kim", score: 80 }, { name: "Park", score: 80 }]));
   ```

7. 학습 포인트:
   - 정렬 알고리즘의 사용: Array.prototype.sort를 사용하여 객체 배열을 정렬하는 방법을 익힙니다.
   - 복합 조건 정렬: 두 개 이상의 조건을 결합하여 정렬하는 방법을 학습합니다.
   - 성능 최적화: 입력 크기가 클 때, 정렬 알고리즘의 시간 복잡도에 대한 이해를 높입니다.
   - 알파벳순 정렬의 중요성: 같은 성적인 경우, 이름을 기준으로 정렬하여 일관성을 유지하는 방법을 다룹니다.